Selecting a population size
===========================

The aim of this tutorial is to help you select a population size for your genetic algorithm. We will use Rosenbrock's banana function.

:math:`f(x,y) = (a-x)^2 + b(y - x^2)^2`

For the constants :math:`a = 1` and :math:`b = 100`, the minimum is at :math:`f(1,1) = 0`.

.. image:: ../static/Rosenbrock_function.png
    :align: center
    :target: https://en.wikipedia.org/wiki/Rosenbrock_function

.. code-block:: python

    import gaga as ga

    genes = {'x':(-2, 2),
            'y':(-1, 3)}

    def evaluate(individual):

        a = 1
        b = 100

        x = individual.genes['x']
        y = individual.genes['y']

        individual.fitness_score = (pow(a - x, 2) + b * pow(y - pow(x, 2), 2))

A small population
------------------

When the population size is small, the genetic algorithm is extremely sensitive to initial conditions.

Low exploration
+++++++++++++++
The problem with a small population is that the initial population might not start anywhere near the global optimum. If the mutation is low then the population may take a long time to discover the optimum or may never discover it at all.

.. code-block:: python

    sim = ga.ga(genes, evaluate, population_size = 10)
    sim.run_simulation(seed = seed)

=============================================================  =============================================================  ==============================================================
.. image:: ../static/tuning/pop_size/small_pop_low_exp_0.gif  .. image:: ../static/tuning/pop_size/small_pop_low_exp_1.gif  .. image:: ../static/tuning/pop_size/small_pop_low_exp_2.gif
``seed = 0``                                                   ``seed = 1``                                                   ``seed = 2``
=============================================================  =============================================================  ==============================================================

Good exploration
++++++++++++++++

For a small population size, you generally want large ``mutate`` and ``sigma`` to encourage exploration.

.. code-block:: python

    sim = ga.ga(genes, evaluate, mutate = 0.6, sigma = 0.3, population_size = 10)
    sim.run_simulation(seed = seed)

=====================================================  =====================================================  =====================================================
.. image:: ../static/tuning/pop_size/small_pop_0.gif  .. image:: ../static/tuning/pop_size/small_pop_1.gif  .. image:: ../static/tuning/pop_size/small_pop_2.gif
``seed = 0``                                           ``seed = 1``                                           ``seed = 2``
=====================================================  =====================================================  =====================================================

A large population
------------------

A large population can be computationally expensive. It is usually better to work with a smaller population.

Low selection
+++++++++++++

A large population will sample the initial search space well making it less dependant to initial conditions and some of the initial population should begin near the optimum. However, the population will be diluted with bad genes and may result in the extinction of fitter individuals forcing the population to converge to a suboptimal solution. A large population is also very resilient and will be slow to move towards the optimum (see below ``seed = 2``).

.. code-block:: python

    sim = ga.ga(genes, evaluate, population_size = 100)
    sim.run_simulation(seed = seed)

=============================================================  =============================================================  ==============================================================
.. image:: ../static/tuning/pop_size/large_pop_low_sel_0.gif  .. image:: ../static/tuning/pop_size/large_pop_low_sel_1.gif  .. image:: ../static/tuning/pop_size/large_pop_low_sel_2.gif
``seed = 0``                                                   ``seed = 1``                                                   ``seed = 2``
=============================================================  =============================================================  ==============================================================

High selection
++++++++++++++

It is usually good to increase the selection pressure for a large population because usually the bad/mediocre genes dominate the population.

.. code-block:: python

    sim = ga.ga(genes, evaluate, population_size = 100, winrate = 0.9, clone = 5)
    sim.run_simulation(seed = seed)

=====================================================  =====================================================  =====================================================
.. image:: ../static/tuning/pop_size/large_pop_0.gif  .. image:: ../static/tuning/pop_size/large_pop_1.gif  .. image:: ../static/tuning/pop_size/large_pop_2.gif
``seed = 0``                                           ``seed = 1``                                           ``seed = 2``
=====================================================  =====================================================  =====================================================